{
  "openapi": "3.1.0",
  "info": {
    "title": "IO Intelligence",
    "version": "1.0"
  },
  "servers": [
    {
      "url": "https://api.intelligence.io.solutions"
    }
  ],
  "components": {
    "securitySchemes": {
      "sec0": {
        "type": "oauth2",
        "flows": {}
      }
    }
  },
  "security": [
    {
      "sec0": []
    }
  ],
  "paths": {
    "/api/r2r/v3/retrieval/rag": {
      "post": {
        "summary": "RAG Query",
        "description": "Execute a RAG (Retrieval-Augmented Generation) query.",
        "operationId": "retrieve-and-generate-rag",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "The user's question"
                  },
                  "search_mode": {
                    "type": "string",
                    "description": "Default value of custom allows full control over search settings.  Pre-configured search modes: basic: A simple semantic-based search. advanced: A more powerful hybrid search combining semantic and full-text. custom: Full control via search_settings.  If filters or limit are provided alongside basic or advanced, they will override the default settings for that mode.",
                    "default": "custom",
                    "enum": [
                      "basic",
                      "advanced",
                      "custom"
                    ]
                  },
                  "search_settings": {
                    "type": "object",
                    "description": "The search configuration object. If search_mode is custom, these settings are used as-is. For basic or advanced, these settings will override the default mode configuration.  Common overrides include filters to narrow results and limit to control how many results are returned.",
                    "properties": {
                      "use_hybrid_search": {
                        "type": "boolean",
                        "description": "Whether to perform a hybrid search. This is equivalent to setting use_semantic_search=True and use_fulltext_search=True, e.g. combining vector and keyword search.",
                        "default": false
                      },
                      "use_semantic_search": {
                        "type": "boolean",
                        "description": "Whether to use semantic search",
                        "default": true
                      },
                      "use_fulltext_search": {
                        "type": "boolean",
                        "description": "Whether to use full-text search",
                        "default": false
                      },
                      "filters": {
                        "type": "string",
                        "description": "Filters to apply to the search. Allowed operators include eq, neq, gt, gte, lt, lte, like, ilike, in, and nin.  Commonly seen filters include operations include the following:  {\"document_id\": {\"$eq\": \"9fbe403b-...\"}}  {\"document_id\": {\"$in\": [\"9fbe403b-...\", \"3e157b3a-...\"]}}  {\"collection_ids\": {\"$overlap\": [\"122fdf6a-...\", \"...\"]}}  {\"$and\": {\"$document_id\": ..., \"collection_ids\": ...}}"
                      },
                      "limit": {
                        "type": "integer",
                        "description": "Maximum number of results to return. >=1 <=1000",
                        "default": 10,
                        "format": "int32"
                      },
                      "offset": {
                        "type": "string",
                        "description": "Offset to paginate search results",
                        "default": "0"
                      },
                      "include_metadatas": {
                        "type": "boolean",
                        "description": "Whether to include element metadata in the search results",
                        "default": true
                      },
                      "include_scores": {
                        "type": "boolean",
                        "description": "Whether to include search score values in the search results",
                        "default": true
                      },
                      "search_strategy": {
                        "type": "string",
                        "description": "Search strategy to use (e.g., ‘vanilla’, ‘query_fusion’, ‘hyde’)",
                        "default": "vanilla"
                      },
                      "hybrid_settings": {
                        "type": "object",
                        "description": "Settings for hybrid search (only used if use_semantic_search and use_fulltext_search are both true)",
                        "properties": {
                          "full_text_weight": {
                            "type": "number",
                            "description": "Weight to apply to full text search",
                            "default": 1,
                            "format": "double"
                          },
                          "semantic_weight": {
                            "type": "number",
                            "description": "Weight to apply to semantic search",
                            "default": 5,
                            "format": "double"
                          },
                          "full_text_limit": {
                            "type": "integer",
                            "description": "Maximum number of results to return from full text search",
                            "default": 200,
                            "format": "int32"
                          },
                          "rrf_k": {
                            "type": "integer",
                            "description": "K-value for RRF (Rank Reciprocal Fusion)",
                            "default": 50,
                            "format": "int32"
                          }
                        }
                      },
                      "chunk_settings": {
                        "type": "object",
                        "description": "Settings specific to chunk/vector search",
                        "properties": {
                          "index_measure": {
                            "type": "string",
                            "description": "The distance measure to use for indexing",
                            "enum": [
                              "l2_distance",
                              "max_inner_product",
                              "cosine_distance",
                              "l1_distance",
                              "hamming_distance",
                              "jaccard_distance"
                            ]
                          },
                          "probes": {
                            "type": "integer",
                            "description": "Number of ivfflat index lists to query. Higher increases accuracy but decreases speed.",
                            "default": 10,
                            "format": "int32"
                          },
                          "ef_search": {
                            "type": "integer",
                            "description": "Size of the dynamic candidate list for HNSW index search. Higher increases accuracy but decreases speed.",
                            "default": 40,
                            "format": "int32"
                          },
                          "enabled": {
                            "type": "boolean",
                            "description": "Whether to enable chunk search",
                            "default": true
                          }
                        }
                      },
                      "graph_settings": {
                        "type": "object",
                        "description": "Settings specific to knowledge graph search",
                        "properties": {
                          "limits": {
                            "type": "array"
                          },
                          "enabled": {
                            "type": "boolean",
                            "description": "Whether to enable graph search",
                            "default": true
                          }
                        }
                      },
                      "num_sub_queries": {
                        "type": "integer",
                        "description": "Number of sub-queries/hypothetical docs to generate when using hyde or rag_fusion search strategies.",
                        "default": 5,
                        "format": "int32"
                      }
                    }
                  },
                  "rag_generation_config": {
                    "type": "object",
                    "description": "Configuration for RAG generation",
                    "properties": {
                      "model": {
                        "type": "string"
                      },
                      "temperature": {
                        "type": "number",
                        "format": "double"
                      },
                      "top_p": {
                        "type": "number",
                        "format": "double"
                      },
                      "max_tokens_to_sample": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "stream": {
                        "type": "boolean"
                      },
                      "functions": {
                        "type": "array"
                      },
                      "tools": {
                        "type": "array"
                      },
                      "add_generation_kwargs": {
                        "type": "array"
                      },
                      "api_base": {
                        "type": "string"
                      },
                      "response_format": {
                        "type": "array",
                        "items": {
                          "properties": {
                            "Base Model": {
                              "type": "object"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "extended_thinking": {
                        "type": "boolean",
                        "description": "Flag to enable extended thinking mode (for Anthropic providers)",
                        "default": false
                      },
                      "thinking_budget": {
                        "type": "integer",
                        "description": "Token budget for internal reasoning when extended thinking mode is enabled. Must be less than max_tokens_to_sample.",
                        "format": "int32"
                      },
                      "reasoning_effort": {
                        "type": "string",
                        "description": "Effort level for internal reasoning when extended thinking mode is enabled, low, medium, or high.Only applicable to OpenAI providers."
                      }
                    }
                  },
                  "task_prompt": {
                    "type": "string",
                    "description": "Optional custom prompt to override default"
                  },
                  "include_title_if_available": {
                    "type": "boolean",
                    "description": "Include document titles in responses when available",
                    "default": false
                  },
                  "include_web_search": {
                    "type": "boolean",
                    "description": "Include web search results provided to the LLM.",
                    "default": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": {
                      "key": "value"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string",
                      "example": "value"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "404",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": {}
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "422": {
            "description": "422",
            "content": {
              "text/plain": {
                "examples": {
                  "Result": {
                    "value": ""
                  }
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-readme": {
          "code-samples": [
            {
              "language": "curl",
              "code": "curl -X POST https://api.intelligence.io.solutions/api/r2r/v3/retrieval/rag \\\n     -H \"Authorization: Bearer $IOINTELLIGENCE_API_KEY\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"query\": \"query\"\n}'"
            },
            {
              "language": "python",
              "code": "from r2r import R2RClient\n\nclient = R2RClient()\n# when using auth, do client.login(...)\n\n# Basic RAG request\nresponse = client.retrieval.rag(\n    query=\"What is DeepSeek R1?\",\n)\n\n# Advanced RAG with custom search settings\nresponse = client.retrieval.rag(\n    query=\"What is DeepSeek R1?\",\n    search_settings={\n        \"use_semantic_search\": True,\n        \"filters\": {\"document_id\": {\"$eq\": \"e43864f5-a36f-548e-aacd-6f8d48b30c7f\"}},\n        \"limit\": 10,\n    },\n    rag_generation_config={\n        \"stream\": False,\n        \"temperature\": 0.7,\n        \"max_tokens\": 1500\n    }\n)\n\n# Hybrid search in RAG\nresults = client.retrieval.rag(\n    \"Who is Jon Snow?\",\n    search_settings={\"use_hybrid_search\": True}\n)\n\n# Custom model selection\nresponse = client.retrieval.rag(\n    \"Who was Aristotle?\",\n    rag_generation_config={\"model\":\"anthropic/claude-3-haiku-20240307\", \"stream\": True}\n)\nfor chunk in response:\n    print(chunk)\n\n# Streaming RAG\nfrom r2r import (\n    CitationEvent,\n    FinalAnswerEvent,\n    MessageEvent,\n    SearchResultsEvent,\n    R2RClient,\n)\n\nresult_stream = client.retrieval.rag(\n    query=\"What is DeepSeek R1?\",\n    search_settings={\"limit\": 25},\n    rag_generation_config={\"stream\": True},\n)\n\n# Process different event types\nfor event in result_stream:\n    if isinstance(event, SearchResultsEvent):\n        print(\"Search results:\", event.data)\n    elif isinstance(event, MessageEvent):\n        print(\"Partial message:\", event.data.delta)\n    elif isinstance(event, CitationEvent):\n        print(\"New citation detected:\", event.data.id)\n    elif isinstance(event, FinalAnswerEvent):\n        print(\"Final answer:\", event.data.generated_answer)\n"
            }
          ],
          "samples-languages": [
            "curl",
            "python"
          ]
        }
      }
    }
  }
}